48. Add Villa Repository Interface to manage/interact with data
add folders
add interface
MagicVilla_VillaAPI/Repository/IRepostiory/IVillaRepository.cs

    public interface IVillaRepository
    {
        Task<List<Villa>> GetAllAsync(Expression<Func<Villa, bool>> filter = null); //Expression is for linq 
        Task<Villa> GetAsync(Expression<Func<Villa, bool>> filter = null, bool tracked = true);
        Task CreateAsync(Villa entity);
        Task UpdateAsync(Villa entity);
        Task RemoveAsync(Villa entity);
        Task SaveAsync();
    }


49. Villa Repository Implementation

Implement the interface. add class
MagicVilla_VillaAPI/Repository/VillaRepository.cs

    public class VillaRepository : IVillaRepository //ctrl + . to implement
    {
        //add applicationDBContext
        private readonly ApplicationDbContext _db; //ctrl + . generate constructor ctor

        public VillaRepository(ApplicationDbContext db)
        {
            _db = db;
        }

        //add async to method
        public async Task CreateAsync(Villa entity)
        {
            await _db.Villas.AddAsync(entity);
            await SaveAsync();
        }

        public async Task<Villa> GetAsync(Expression<Func<Villa, bool>> filter = null, bool tracked = true)
        {
            IQueryable<Villa> query = _db.Villas;

            if (!tracked)
            {
                query = query.AsNoTracking();
            }

            if (filter != null)
            {
                query = query.Where(filter);
            }

            return await query.FirstOrDefaultAsync();
        }

        public async Task<List<Villa>> GetAllAsync(Expression<Func<Villa, bool>> filter = null)
        {
            IQueryable<Villa> query = _db.Villas; //does not get executed right away, so we can add filter

            if (filter != null)
            {
                query = query.Where(filter);
            }

            return await query.ToListAsync();
        }

        public async Task RemoveAsync(Villa entity)
        {
            _db.Villas.Remove(entity);
            await SaveAsync();
        }

        public async Task SaveAsync()
        {
            await _db.SaveChangesAsync();
        }

        public async Task UpdateAsync(Villa entity)
        {
            _db.Villas.Update(entity);
            await SaveAsync();
        }
    }


50. Async Repository in Action - IMPORTANT LESSON
https://github.com/bhrugen/MagicVilla_API/commit/b792f3e3664235466dabcb0e8a041fcc1ad9e5a4?diff=split&w=0#diff-7639ff51b336ce6a0f764af782bd6e5fd770cd1a636fea0a231b9794c90ec737

MagicVilla_VillaAPI/Repository/IRepostiory/IVillaRepository.cs
MagicVilla_VillaAPI/Repository/VillaRepository.cs
MagicVilla_VillaAPI/Program.cs
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs

Add to MagicVilla_VillaAPI/Program.cs
    builder.Services.AddScoped<IVillaRepository, VillaRepository>();

Update MagicVilla_VillaAPI/Controllers/VillaAPIController.cs

Update dependency injection
        //50 repository
        private readonly IVillaRepository _dbVilla;
        public VillaAPIController(IVillaRepository dbVilla, ILogger<VillaAPIController> logger, IMapper mapper) //(ApplicationDbContext
        {
            //_db = db;
            _dbVilla = dbVilla;
            _logger = logger;
            _mapper = mapper;
        }


51. Repository and IRepositoty, create generic- NEEDED when using multiple repository, exclude this if only 1 repo like the master list api
if multiple not needed, exclude this
we will be using this code over with other interfaces.
https://github.com/bhrugen/MagicVilla_API/commit/0bf941572a0c4e84db77e3fa41d413d7d030146b#diff-1001dfb7d277a764c83d8414e978e985d32593c464e26ecdac1f6700d8cf352d

1. add new interface MagicVilla_VillaAPI/Repository/IRepostiory/IRepository.cs

2. move code from MagicVilla_VillaAPI/Repository/IRepostiory/IVillaRepository.cs to MagicVilla_VillaAPI/Repository/IRepostiory/IRepository.cs
keep updateasync in IVillaRepository.cs because updates are typically not the same

MagicVilla_VillaAPI/Repository/IRepostiory/IVillaRepository.cs

    public interface IVillaRepository : IRepository<Villa>
    {
        Task<Villa> UpdateAsync(Villa entity);
    }

MagicVilla_VillaAPI/Repository/IRepostiory/IRepository.cs

    public interface IRepository<T> where T : class
    {
        Task<List<T>> GetAllAsync(Expression<Func<T, bool>>? filter = null); //expression is for linq
        Task<T> GetAsync(Expression<Func<T, bool>> filter = null, bool tracked = true);
        Task CreateAsync(T entity);
        Task RemoveAsync(T entity);
        Task SaveAsync();
    }

3. Implment repository: MagicVilla_VillaAPI/Repository/Repository.cs
copy all from MagicVilla_VillaAPI/Repository/VillaRepository.cs except UpdateAsync
replace all _db.Villas. to dbSet.

4. make sure MagicVilla_VillaAPI/Repository/VillaRepository.cs only has

    public class VillaRepository : Repository<Villa>, IVillaRepository //ctrl + . to implement
    {
        private readonly ApplicationDbContext _db;
        public VillaRepository(ApplicationDbContext db) : base(db)
        {
            _db = db;
        }
        public async Task<Villa> UpdateAsync(Villa entity)
        {
            entity.UpdatedDate = DateTime.Now;
            _db.Villas.Update(entity);
            await _db.SaveChangesAsync();
            return entity;
        }
    }


52. API Response, typically 1 standard response
MagicVilla_VillaAPI/Models/APIResponse.cs

{
    public class APIResponse
    {
        //i.e. 201, 204, 404, etc
        public HttpStatusCode StatusCode { get; set; }
        public bool IsSuccess { get; set; } = true;
        public List<string> ErrorMessages { get; set; }
        public object Result { get; set; }
    }


53. Standard API Response, make changes to VillaAPIController.cs to use APIResponse.cs. all return types will now be APIResponse
https://github.com/bhrugen/MagicVilla_API/commit/72e132eb0370c2e7c8a681319cd2411d53f3d7bc#diff-05d3e6a00179038ec6b16b6a8bdb5f8e15775ceb288168625aead8b0348c39cb

MagicVilla_VillaAPI/Controllers/VillaAPIController.cs
For each, we use a TRY CATCH and populate all fields, then return that response. For example:

        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<ActionResult<APIResponse>> GetVillas()
        {
            try
            {
                _logger.LogInformation("Getting all villas");

                //get villa list
                IEnumerable<Villa> villaList = await _dbVilla.GetAllAsync();

                //convert to villaDTO
                _response.Result = _mapper.Map<List<VillaDTO>>(villaList); //Map<destination type>(object to convert) //<output>(input)
                _response.StatusCode = HttpStatusCode.OK;
                return Ok(_response);
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.ErrorMessages
                     = new List<string>() { ex.ToString() };
            }
            return _response;
        }

now, when testing, here's an example response when creating:
    {
      "statusCode": 201,
      "isSuccess": true,
      "errorMessages": null,
      "result": {
        "id": 12,
        "name": "stri999999999ng",
        "details": "st99999999ring",
        "rate": 99990,
        "occupancy": 999990,
        "sqft": 0,
        "imageUrl": "string",
        "amenity": "string"
      }
    }



54. Villa Number Models for ADDING NEW Villa Number API
See step 55.


55. ADDING NEW Villa Number API Endpoints, models, controller, etc
https://github.com/bhrugen/MagicVilla_API/commit/6cd115dda7f26a8d450783c60d63028ef1fcc3fb#diff-a6cc3a62686b0d9b9646be4f4f52394e25b19789c0debc80a0ff2ec225ac3994
https://github.com/bhrugen/MagicVilla_API/commit/aee59cdeb3f1b982138b88b1a142bb154c4ae7c8

1. create MagicVilla_VillaAPI/Models/VillaNumber.cs
2. create MagicVilla_VillaAPI/Models/Dto/VillaNumberDTO.cs

These are the same for now. If there are changes down the road, you'll be able to make changes 
3. create MagicVilla_VillaAPI/Models/Dto/VillaNumberUpdateDTO.cs
4. create MagicVilla_VillaAPI/Models/Dto/VillaNumberCreateDTO.cs

    public class VillaNumberUpdateDTO or VillaNumberCreateDTO
    {
        [Required]
        public int VillaNo { get; set; }

        public string SpecialDetails { get; set; }
    }

5. Create table in database for VillaNumbers
MagicVilla_VillaAPI/Data/ApplicationDbContext.cs

        public DbSet<VillaNumber> VillaNumbers { get; set; } //table name is Villas

6. add migration to push the table
pm console
add-migration AddVillaNumberToDb
update-database

https://github.com/bhrugen/MagicVilla_API/commit/aee59cdeb3f1b982138b88b1a142bb154c4ae7c8?diff=split&w=0
7. add VillaNumber Repository 
can copy existing repository and change Villa to VillaNumber
7a. add MagicVilla_VillaAPI/Repository/IRepostiory/IVillaNumberRepository.cs
7b. add MagicVilla_VillaAPI/Repository/VillaNumberRepository.cs

8. Register Dependency Injection
MagicVilla_VillaAPI/Program.cs

    builder.Services.AddScoped<IVillaNumberRepository, VillaNumberRepository>();

9. Add mapping congifuration
MagicVilla_VillaAPI/MappingConfig.cs

    public class MappingConfig : Profile
    {
        public MappingConfig()
        {
            CreateMap<Villa, VillaDTO>();
            CreateMap<VillaDTO, Villa>();

            CreateMap<Villa, VillaCreateDTO>().ReverseMap();
            CreateMap<Villa, VillaUpdateDTO>().ReverseMap();

            //for villanumber
            CreateMap<VillaNumber, VillaNumberDTO>().ReverseMap();
            CreateMap<VillaNumber, VillaNumberCreateDTO>().ReverseMap();
            CreateMap<VillaNumber, VillaNumberUpdateDTO>().ReverseMap();
        }
    }

10. Create VillaNumberController
MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs
Test endpoints



56. Add Foreign Key Reference, no mapping between VillaNumber and Villa yet. One (villa) to many (VillaNumbers)
Add this to model
MagicVilla_VillaAPI/Models/VillaNumber.cs

        [ForeignKey("Villa")]
        public int VillaID { get; set; }
        public Villa Villa { get; set; }

add-migration AddForeignKeyToVillaTable
update-database

in migration, onDelete: ReferentialAction.Cascade) means that if a villa is deleted, these records will also be deleted

ERROR IN MIGRATION:
The ALTER TABLE statement conflicted with the FOREIGN KEY constraint "FK_VillaNumbers_Villas_VillaID". 
The conflict occurred in database "Magic_VillaAPI", table "dbo.Villas", column 'Id'.

Right now villnumbers is not empty, so it's trying to add a null value for the foreign key villaID, which creates the error
Need to delete the record

57. CRUD Villa Number DTO with Villa ID
https://github.com/bhrugen/MagicVilla_API/commit/4c08c5d286372eb51183a6d5b33ae3b9f591a43b#diff-65f682a433fcc0cf21257269bf0e4fc17831340eeed8e2504533738235da3e36

update MagicVilla_VillaAPI/Models/Dto/VillaNumberCreateDTO.cs
update MagicVilla_VillaAPI/Models/Dto/VillaNumberUpdateDTO.cs
update MagicVilla_VillaAPI/Models/Dto/VillaNumberDTO.cs

all to include:

        [Required]
        public int VillaID { get; set; }

test post:

{
  "villaNo": 101,
  "villaID": 1,
  "specialDetails": "string"
}

for invalid villa id, we need to update the controller
update MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs
Need to inject the villa repository

        //57. villa number custom error
        private readonly IVillaRepository _dbVilla;

        public VillaNumberAPIController(IVillaNumberRepository dbVillaNumber, ILogger<VillaNumberAPIController> logger, IMapper mapper, IVillaRepository dbVilla) //(ApplicationDbContext
        {...
            this._response = new();
            _dbVilla = dbVilla; 
        }...

add the validation to POST (create) and PUT (update) methods
...
        [HttpPost]
        ...
        public async Task<ActionResult<APIResponse>> CreateVillaNumber([FromBody] VillaNumberCreateDTO createDTO)
        {
            try
            {
                //24. Custom ModelState Validation, unique/distinct villa name
                if (await _dbVillaNumber.GetAsync(u => u.VillaNo == createDTO.VillaNo) != null)
                {
                    ModelState.AddModelError("CustomError", "Villa Number already Exists!");//key:value. Key must be unique
                    return BadRequest(ModelState);
                }

                //57. villa number custom error/validation
                if (await _dbVilla.GetAsync(u => u.Id == createDTO.VillaID) == null) //null means VillaId is invalid
                {
                    ModelState.AddModelError("CustomError", "Villa ID is Invalid!");
                    return BadRequest(ModelState);
                }
                ...
        ...
        [HttpPut("{id:int}", Name = "UpdateVillaNumber")]
        ...
        public async Task<ActionResult<APIResponse>> UpdateVillaNumber(int id, [FromBody] VillaNumberUpdateDTO updateDTO)
        {
            try
            {
                if (updateDTO == null || id != updateDTO.VillaNo)
                {
                    return BadRequest();
                }

                //57. villa number custom error/validation
                if (await _dbVilla.GetAsync(u => u.Id == createDTO.VillaID) == null)
                {
                    ModelState.AddModelError("CustomError", "Villa ID is Invalid!");
                    return BadRequest(ModelState);
                }
                ...

