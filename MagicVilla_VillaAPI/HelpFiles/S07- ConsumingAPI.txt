https://github.com/bhrugen/MagicVilla_API/commits/master/?before=ded7b5475d6514cb2865de5293a001ebb3aeda45+70

58. CONSUMING API- Setup MVC Web Project after api in place
https://github.com/bhrugen/MagicVilla_API/commit/a222c407265b7b06a55783d6d0bf0d15696d8845#diff-05efd0252ddf692779afc49ff88d90ac7ea002dedc9af470ce100dba6733af9a

create new project in solution
right click solution, add, projects
mvc core web app model view controller
to view, set as start up project by right clicking on it

ERROR: INDEX NOT FOUND

Packages, using .net7 for this:

1st install nuget package
Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation

MagicVilla_Web\Program.cs

	// Add services to the container.
	//builder.Services.AddControllersWithViews()
	builder.Services.AddControllersWithViews().AddRazorRuntimeCompilation();

before changing port number
https://localhost:7284/
https://localhost:7245/swagger/index.html

Change port number in 
MagicVilla_VillaAPI/Properties/launchSettings.json
      "applicationUrl": "https://localhost:7001;http://localhost:5121",
MagicVilla_Web/Properties/launchSettings.json
      "applicationUrl": "https://localhost:7002;http://localhost:5158"

Right click on solution, set startup projects
common properties, startup project, multiple startup projects, action start


59. Web Project DTO's and API Models, constants in application
https://github.com/bhrugen/MagicVilla_API/commit/ddd9a7c2028b35f5302587b303da81b521b5fc14#diff-1d053aa46a443d4e062f3163e5bd2a348ab54cf09c3aa772cac07740aff85333
Copy models folder to web project
remove villa and villanumber
Change namespaces to MagicVilla_Web for apiresponse and dtos

constants in application
should be separated, but will show how when we keep them together
new project class library
MagicVilla_Utility/SD.cs

    public static class SD //static details
    {
        public enum ApiType
        {
            GET,
            POST,
            PUT,
            DELETE
        }
    }

create new class MagicVilla_Web/Models/APIRequest.cs

    public class APIRequest  //when we request from an endpoint
    {
        public ApiType ApiType { get; set; } = ApiType.GET;
        public string Url { get; set; }
        public object Data { get; set; }
    }

add project reference
right click web proj, add, project reference and select utility 


60. AutoMapper in web project
Install nuget packages
AutoMapper
AutoMapper.Extensions.Microsoft.DependencyInjection

Create MagicVilla_Web/MappingConfig.cs

    public class MappingConfig : Profile
    {
        public MappingConfig()
        {
            CreateMap<VillaDTO, VillaCreateDTO>().ReverseMap();
            CreateMap<VillaDTO, VillaUpdateDTO>().ReverseMap();

            CreateMap<VillaNumberDTO, VillaNumberCreateDTO>().ReverseMap();
            CreateMap<VillaNumberDTO, VillaNumberUpdateDTO>().ReverseMap();
        }
    }

add to MagicVilla_Web/Program.cs

    using MagicVilla_Web;
    ...
    // Add services to the container.
    builder.Services.AddControllersWithViews().AddRazorRuntimeCompilation();
    builder.Services.AddAutoMapper(typeof(MappingConfig));
    var app = builder.Build();


61. Add API URL in AppSettings.json
Do not hard code into controller or class file

API: https://localhost:7001/
WEB: https://localhost:7002/

MagicVilla_Web/appsettings.json
...
      },
      "AllowedHosts": "*",
      "ServiceUrls": {
        "VillaAPI": "https://localhost:7001"
      }
    }


62. Base Service for API request and response. IBaseService and BaseService
https://github.com/bhrugen/MagicVilla_API/commit/2f13024f7379f8411b713d467f70ed23ead245fc

create Services folders in web proj
add interface
MagicVilla_Web/Services/IServices/IBaseService.cs

    public interface IBaseService
    {
        APIResponse responseModel { get; set; }
        Task<T> SendAsync<T>(APIRequest apiRequest); //to send api calls to call api
    }

install Newtonsoft.Json nuget package

Implement the base service
MagicVilla_Web/Services/BaseService.cs

    public class BaseService : IBaseService
    {
        public APIResponse responseModel { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        //to call the api
        public IHttpClientFactory httpClient { get; set; }
        public BaseService()
        {
            this.responseModel = new();
            this.httpClient = httpClient;
        }
        public async Task<T> SendAsync<T>(APIRequest apiRequest)
        {
            try
            {
                //create client
                var client = httpClient.CreateClient("MagicAPI");
                HttpRequestMessage message = new HttpRequestMessage();
                //configure message (assign properties)
                message.Headers.Add("Accept", "application/json");
                //url where we call the api
                message.RequestUri = new Uri(apiRequest.Url);
                //serialize data if it exists
                //data will not be null in POST/PUT http calls
                if (apiRequest.Data != null)
                {
                    message.Content = new StringContent(JsonConvert.SerializeObject(apiRequest.Data),
                        Encoding.UTF8, "application/json");
                }

                //define http type call
                switch (apiRequest.ApiType)
                {
                    case SD.ApiType.POST:
                        message.Method = HttpMethod.Post;
                        break;
                    case SD.ApiType.PUT:
                        message.Method = HttpMethod.Put;
                        break;
                    case SD.ApiType.DELETE:
                        message.Method = HttpMethod.Delete;
                        break;
                    default:
                        message.Method = HttpMethod.Get;
                        break;
                }

                //when above sent, we will receive a response. set null by default
                HttpResponseMessage apiResponse = null;
                //call api endpoint
                apiResponse = await client.SendAsync(message);
                //get api content from response
                var apiContent = await apiResponse.Content.ReadAsStringAsync();
                //deserialize. then will be model apiresponse. has to be of type <T>
                var APIResponse = JsonConvert.DeserializeObject<T>(apiContent);
                return APIResponse;
            }
            catch (Exception e)
            {
                var dto = new APIResponse
                {
                    ErrorMessages = new List<string> { Convert.ToString(e.Message) },
                    IsSuccess = false
                };
                var res = JsonConvert.SerializeObject(dto);
                var APIResponse = JsonConvert.DeserializeObject<T>(res);
                return APIResponse;
            }
        }
    }


63. IVillaService and VillaService CRUD interface using basse service interface. Adding Villa Service 
https://github.com/bhrugen/MagicVilla_API/commit/2b5e20ffa3a8a32bf797f031d3be1520481122da#diff-87b211503afb139bd9386399150f0c77b4c403fcfb3b38e8c19ba1f205371863

add new interface
MagicVilla_Web/Services/IServices/IVillaService.cs

    public interface IVillaService 
    {
        Task<T> GetAllAsync<T>();
        Task<T> GetAsync<T>(int id);
        Task<T> CreateAsync<T>(VillaCreateDTO dto);
        Task<T> UpdateAsync<T>(VillaUpdateDTO dto);
        Task<T> DeleteAsync<T>(int id);
    }

implement interface
MagicVilla_Web/Services/VillaService.cs

using MagicVilla_Utility;
using MagicVilla_Web.Models;
using MagicVilla_Web.Models.Dto;
using MagicVilla_Web.Services.IServices;

namespace MagicVilla_Web.Services
{
    public class VillaService : BaseService, IVillaService
    {
        //dependency injection
        private readonly IHttpClientFactory _clientFactory;
        private string villaUrl;

        public VillaService(IHttpClientFactory clientFactory, IConfiguration configuration) : base(clientFactory)
        {
            _clientFactory = clientFactory;
            //get url of api to invoke service. from appsettings.json. ("key:value")
            villaUrl = configuration.GetValue<string>("ServiceUrls:VillaAPI");
        }

        public Task<T> CreateAsync<T>(VillaCreateDTO dto)
        {
            //SendAsync inside base service
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.POST,
                Data = dto, //obj VillaCreateDTO
                Url = villaUrl + "/api/villaAPI" //this is the route from api controller
            });
        }

        public Task<T> DeleteAsync<T>(int id)
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.DELETE,
                Url = villaUrl + "/api/villaAPI/" + id
            });
        }

        public Task<T> GetAllAsync<T>()
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.GET,
                Url = villaUrl + "/api/villaAPI"
            });
        }

        public Task<T> GetAsync<T>(int id)
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.GET,
                Url = villaUrl + "/api/villaAPI/" + id
            });
        }

        public Task<T> UpdateAsync<T>(VillaUpdateDTO dto)
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.PUT,
                Data = dto,
                Url = villaUrl + "/api/villaAPI/" + dto.Id
            });
        }
    }
}


add to program.cs
add to dependency injection so we can use this in our controllers
MagicVilla_Web/Program.cs

    builder.Services.AddAutoMapper(typeof(MappingConfig));

    //63. ivillaservice interface
    //register http client on villa service
    builder.Services.AddHttpClient<IVillaService, VillaService>();
    //register VillaService to dependency injection
    builder.Services.AddScoped<IVillaService, VillaService>();


64. Calling Villa API by adding villa controller
MagicVilla_Web/Controllers/VillaController.cs

    public class VillaController : Controller
    {
        private readonly IVillaService _villaService;
        private readonly IMapper _mapper;
        public VillaController(IVillaService villaService, IMapper mapper)
        {
            _villaService = villaService;
            _mapper = mapper;
        }

        public async Task<IActionResult> IndexVilla()
        {
            List<VillaDTO> list = new();

            var response = await _villaService.GetAllAsync<APIResponse>();
            if (response != null && response.IsSuccess)
            {
                list = JsonConvert.DeserializeObject<List<VillaDTO>>(Convert.ToString(response.Result));
            }
            return View(list);
        }
    }

add inside headers
MagicVilla_Web/Views/Shared/_Layout.cshtml

                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Villa" asp-action="IndexVilla">Privacy</a>
                        </li>

any errors, look in baseservice.cs and set breakpoint on apiResponse = await client.SendAsync(message);

65. Display all Villa List






66. Create Villa UI






67. Disable NULLABLE - IMPORTANT






68. Update Villa Action Methods






69. Update VIlla UI






70. Delete Villa






71. Add VillaNumberService






72. Getting Villa Numbers






73. Include Villa when retireving Villa Number






74. Bootswatch Theme






75. Villa Home Page






76. Move Images






77. Villa Number Assignment






78. Create Villa Number GET






79. Create Villa POST






80. Special Validation and Base Service Update






81. Display API Error Messages






82. Update and Delete Action Method for Villa Number






83. Update and Delete Villa Number






84. Sweet Alert





