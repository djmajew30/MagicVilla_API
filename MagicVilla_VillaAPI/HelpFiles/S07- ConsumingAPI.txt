https://github.com/bhrugen/MagicVilla_API/commits/master/?before=ded7b5475d6514cb2865de5293a001ebb3aeda45+70

58. CONSUMING API- Setup MVC Web Project after api in place
https://github.com/bhrugen/MagicVilla_API/commit/a222c407265b7b06a55783d6d0bf0d15696d8845#diff-05efd0252ddf692779afc49ff88d90ac7ea002dedc9af470ce100dba6733af9a

create new project in solution
right click solution, add, projects
mvc core web app model view controller
to view, set as start up project by right clicking on it

ERROR: INDEX NOT FOUND

Packages, using .net7 for this:

1st install nuget package
Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation

MagicVilla_Web\Program.cs

	// Add services to the container.
	//builder.Services.AddControllersWithViews()
	builder.Services.AddControllersWithViews().AddRazorRuntimeCompilation();

before changing port number
https://localhost:7284/
https://localhost:7245/swagger/index.html

Change port number in 
MagicVilla_VillaAPI/Properties/launchSettings.json
      "applicationUrl": "https://localhost:7001;http://localhost:5121",
MagicVilla_Web/Properties/launchSettings.json
      "applicationUrl": "https://localhost:7002;http://localhost:5158"

Right click on solution, set startup projects
common properties, startup project, multiple startup projects, action start


59. Web Project DTO's and API Models, constants in application
https://github.com/bhrugen/MagicVilla_API/commit/ddd9a7c2028b35f5302587b303da81b521b5fc14#diff-1d053aa46a443d4e062f3163e5bd2a348ab54cf09c3aa772cac07740aff85333
Copy models folder to web project
remove villa and villanumber
Change namespaces to MagicVilla_Web for apiresponse and dtos

constants in application
should be separated, but will show how when we keep them together
new project class library
MagicVilla_Utility/SD.cs

    public static class SD //static details
    {
        public enum ApiType
        {
            GET,
            POST,
            PUT,
            DELETE
        }
    }

create new class MagicVilla_Web/Models/APIRequest.cs

    public class APIRequest  //when we request from an endpoint
    {
        public ApiType ApiType { get; set; } = ApiType.GET;
        public string Url { get; set; }
        public object Data { get; set; }
    }

add project reference
right click web proj, add, project reference and select utility 


60. AutoMapper in web project
Install nuget packages
AutoMapper
AutoMapper.Extensions.Microsoft.DependencyInjection

Create MagicVilla_Web/MappingConfig.cs

    public class MappingConfig : Profile
    {
        public MappingConfig()
        {
            CreateMap<VillaDTO, VillaCreateDTO>().ReverseMap();
            CreateMap<VillaDTO, VillaUpdateDTO>().ReverseMap();

            CreateMap<VillaNumberDTO, VillaNumberCreateDTO>().ReverseMap();
            CreateMap<VillaNumberDTO, VillaNumberUpdateDTO>().ReverseMap();
        }
    }

add to MagicVilla_Web/Program.cs

    using MagicVilla_Web;
    ...
    // Add services to the container.
    builder.Services.AddControllersWithViews().AddRazorRuntimeCompilation();
    builder.Services.AddAutoMapper(typeof(MappingConfig));
    var app = builder.Build();


61. Add API URL in AppSettings.json
Do not hard code into controller or class file

API: https://localhost:7001/
WEB: https://localhost:7002/

MagicVilla_Web/appsettings.json
...
      },
      "AllowedHosts": "*",
      "ServiceUrls": {
        "VillaAPI": "https://localhost:7001"
      }
    }


62. Base Service for API request and response. IBaseService and BaseService
https://github.com/bhrugen/MagicVilla_API/commit/2f13024f7379f8411b713d467f70ed23ead245fc

create Services folders in web proj
add interface
MagicVilla_Web/Services/IServices/IBaseService.cs

    public interface IBaseService
    {
        APIResponse responseModel { get; set; }
        Task<T> SendAsync<T>(APIRequest apiRequest); //to send api calls to call api
    }

install Newtonsoft.Json nuget package

Implement the base service
MagicVilla_Web/Services/BaseService.cs

    public class BaseService : IBaseService
    {
        public APIResponse responseModel { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        //to call the api
        public IHttpClientFactory httpClient { get; set; }
        public BaseService()
        {
            this.responseModel = new();
            this.httpClient = httpClient;
        }
        public async Task<T> SendAsync<T>(APIRequest apiRequest)
        {
            try
            {
                //create client
                var client = httpClient.CreateClient("MagicAPI");
                HttpRequestMessage message = new HttpRequestMessage();
                //configure message (assign properties)
                message.Headers.Add("Accept", "application/json");
                //url where we call the api
                message.RequestUri = new Uri(apiRequest.Url);
                //serialize data if it exists
                //data will not be null in POST/PUT http calls
                if (apiRequest.Data != null)
                {
                    message.Content = new StringContent(JsonConvert.SerializeObject(apiRequest.Data),
                        Encoding.UTF8, "application/json");
                }

                //define http type call
                switch (apiRequest.ApiType)
                {
                    case SD.ApiType.POST:
                        message.Method = HttpMethod.Post;
                        break;
                    case SD.ApiType.PUT:
                        message.Method = HttpMethod.Put;
                        break;
                    case SD.ApiType.DELETE:
                        message.Method = HttpMethod.Delete;
                        break;
                    default:
                        message.Method = HttpMethod.Get;
                        break;
                }

                //when above sent, we will receive a response. set null by default
                HttpResponseMessage apiResponse = null;
                //call api endpoint
                apiResponse = await client.SendAsync(message);
                //get api content from response
                var apiContent = await apiResponse.Content.ReadAsStringAsync();
                //deserialize. then will be model apiresponse. has to be of type <T>
                var APIResponse = JsonConvert.DeserializeObject<T>(apiContent);
                return APIResponse;
            }
            catch (Exception e)
            {
                var dto = new APIResponse
                {
                    ErrorMessages = new List<string> { Convert.ToString(e.Message) },
                    IsSuccess = false
                };
                var res = JsonConvert.SerializeObject(dto);
                var APIResponse = JsonConvert.DeserializeObject<T>(res);
                return APIResponse;
            }
        }
    }


63. IVillaService and VillaService CRUD interface using basse service interface. Adding Villa Service 
https://github.com/bhrugen/MagicVilla_API/commit/2b5e20ffa3a8a32bf797f031d3be1520481122da#diff-87b211503afb139bd9386399150f0c77b4c403fcfb3b38e8c19ba1f205371863

add new interface
MagicVilla_Web/Services/IServices/IVillaService.cs

    public interface IVillaService 
    {
        Task<T> GetAllAsync<T>();
        Task<T> GetAsync<T>(int id);
        Task<T> CreateAsync<T>(VillaCreateDTO dto);
        Task<T> UpdateAsync<T>(VillaUpdateDTO dto);
        Task<T> DeleteAsync<T>(int id);
    }

implement interface
MagicVilla_Web/Services/VillaService.cs

using MagicVilla_Utility;
using MagicVilla_Web.Models;
using MagicVilla_Web.Models.Dto;
using MagicVilla_Web.Services.IServices;

namespace MagicVilla_Web.Services
{
    public class VillaService : BaseService, IVillaService
    {
        //dependency injection
        private readonly IHttpClientFactory _clientFactory;
        private string villaUrl;

        public VillaService(IHttpClientFactory clientFactory, IConfiguration configuration) : base(clientFactory)
        {
            _clientFactory = clientFactory;
            //get url of api to invoke service. from appsettings.json. ("key:value")
            villaUrl = configuration.GetValue<string>("ServiceUrls:VillaAPI");
        }

        public Task<T> CreateAsync<T>(VillaCreateDTO dto)
        {
            //SendAsync inside base service
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.POST,
                Data = dto, //obj VillaCreateDTO
                Url = villaUrl + "/api/villaAPI" //this is the route from api controller
            });
        }

        public Task<T> DeleteAsync<T>(int id)
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.DELETE,
                Url = villaUrl + "/api/villaAPI/" + id
            });
        }

        public Task<T> GetAllAsync<T>()
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.GET,
                Url = villaUrl + "/api/villaAPI"
            });
        }

        public Task<T> GetAsync<T>(int id)
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.GET,
                Url = villaUrl + "/api/villaAPI/" + id
            });
        }

        public Task<T> UpdateAsync<T>(VillaUpdateDTO dto)
        {
            return SendAsync<T>(new APIRequest()
            {
                ApiType = SD.ApiType.PUT,
                Data = dto,
                Url = villaUrl + "/api/villaAPI/" + dto.Id
            });
        }
    }
}


add to program.cs
add to dependency injection so we can use this in our controllers
MagicVilla_Web/Program.cs

    builder.Services.AddAutoMapper(typeof(MappingConfig));

    //63. ivillaservice interface
    //register http client on villa service
    builder.Services.AddHttpClient<IVillaService, VillaService>();
    //register VillaService to dependency injection
    builder.Services.AddScoped<IVillaService, VillaService>();


64. Calling Villa API by adding villa controller
MagicVilla_Web/Controllers/VillaController.cs

    public class VillaController : Controller
    {
        private readonly IVillaService _villaService;
        private readonly IMapper _mapper;
        public VillaController(IVillaService villaService, IMapper mapper)
        {
            _villaService = villaService;
            _mapper = mapper;
        }

        public async Task<IActionResult> IndexVilla()
        {
            List<VillaDTO> list = new();

            var response = await _villaService.GetAllAsync<APIResponse>();
            if (response != null && response.IsSuccess)
            {
                list = JsonConvert.DeserializeObject<List<VillaDTO>>(Convert.ToString(response.Result));
            }
            return View(list);
        }
    }

add inside headers
MagicVilla_Web/Views/Shared/_Layout.cshtml

                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Villa" asp-action="IndexVilla">Privacy</a>
                        </li>

any errors, look in baseservice.cs and set breakpoint on apiResponse = await client.SendAsync(message);

65. Display all Villa List
https://github.com/bhrugen/MagicVilla_API/commit/fddbe6b8849a79b33edcaa9e67d930eb18cc3c4a

install https://icons.getbootstrap.com/
MagicVilla_Web/Views/Shared/_Layout.cshtml

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

in controller, right click IndexVilla, add view, same name IndexVilla
MagicVilla_Web/Views/Villa/IndexVilla.cshtml


66. Create Villa UI view/page
https://github.com/bhrugen/MagicVilla_API/commit/ef8d3c3b5d8b6cbe45f7dbefa1435f7347ed4e96

MagicVilla_Web/Models/Dto/VillaCreateDTO.cs

MagicVilla_Web/Controllers/VillaController.cs

MagicVilla_Web/Views/Villa/CreateVilla.cshtml


67. Disable NULLABLE IN API PROJECT - IMPORTANT
https://github.com/bhrugen/MagicVilla_API/commit/c6c7c7ac53cd80f78841b025b785c67d62a9e886#diff-1e8645bae73d9641d95fb93965aaa69059e6ecd7d9a3d2fc31e631ec78b71e6a

ERROR CREATE IS NOT CREATING. debug on                 
                //call api endpoint
                apiResponse = await client.SendAsync(message); 
shows bad request

MagicVilla_VillaAPI/Models/Villa.cs
make Name field         [Required]

edit project file
MagicVilla_VillaAPI/MagicVilla_VillaAPI.csproj
to 

    <Nullable>disable</Nullable>

and
MagicVilla_Web/MagicVilla_Web.csproj
    <Nullable>disable</Nullable>

you can also remove this, so if you have a project where this is removed, that's why

add and update new migration in pm console api project, ***must have starup project as _api as well
add-migration ChangeNullableToFalse
update-database


68. Update Villa Action Methods in controller
https://github.com/bhrugen/MagicVilla_API/commit/0eff47d34a4f37988ff07688ea5773a093417eab

MagicVilla_Web/Controllers/VillaController.cs

		//GetAsync for updating a record
		public async Task<IActionResult> UpdateVilla(int villaId)
		{
			var response = await _villaService.GetAsync<APIResponse>(villaId);
			if (response != null && response.IsSuccess)
			{
				VillaDTO model = JsonConvert.DeserializeObject<VillaDTO>(Convert.ToString(response.Result));
				return View(_mapper.Map<VillaUpdateDTO>(model));
			}
			return NotFound();
		}

		//UpdateAsync for updating a record
		[HttpPost]
		[ValidateAntiForgeryToken]
		public async Task<IActionResult> UpdateVilla(VillaUpdateDTO model)
		{
			if (ModelState.IsValid)
			{

				var response = await _villaService.UpdateAsync<APIResponse>(model);
				if (response != null && response.IsSuccess)
				{
					return RedirectToAction(nameof(IndexVilla));
				}
			}
			return View(model);
		}

MagicVilla_Web/Views/Villa/IndexVilla.cshtml
						@*asp-route- must match the name in the VillaController		public async Task<IActionResult> UpdateVilla(int villaId)*@
						<a asp-controller="Villa" asp-action="UpdateVilla" asp-route-villaId = "@item.Id" class="btn btn-success"><i class="bi bi-pencil-square"></i> Edit</a>
						<a asp-controller="Villa" asp-action="DeleteVilla" asp-route-villaId="@item.Id" class="btn btn-danger"><i class="bi bi-trash-fill"></i> Delete</a>


69. Update VIlla UI page
https://github.com/bhrugen/MagicVilla_API/commit/7936904dc4ff3663dbda8464b2f534cd3b72e6f2

in controller, right click and add view
MagicVilla_Web/Views/Villa/UpdateVilla.cshtml

70. Delete Villa controller and UI
https://github.com/bhrugen/MagicVilla_API/commit/c3a39fad5e1bb7f36bc2940e4a815f53e1c8ba6f

update MagicVilla_Web/Controllers/VillaController.cs
add MagicVilla_Web/Views/Villa/DeleteVilla.cshtml


71. Add VillaNumberService interface and implementation
https://github.com/bhrugen/MagicVilla_API/commit/1d96027f18ae48ac271f0bdbd15b289af3e9edcc

add interface
MagicVilla_Web/Services/IServices/IVillaNumberService.cs

implement interface
MagicVilla_Web/Services/VillaNumberService.cs

add to services
MagicVilla_Web/Program.cs


72. Getting Villa Numbers using the controller
https://github.com/bhrugen/MagicVilla_API/commit/9f9b72dcc194b916d8f8fa9d7e6ba7ec7d03047e

add controller with automapper and dependency injection
MagicVilla_Web/Controllers/VillaNumberController.cs

update MagicVilla_Web/Models/Dto/VillaNumberDTO.cs
        public VillaDTO Villa { get; set; }

create view
MagicVilla_Web/Views/VillaNumber/IndexVillaNumber.cshtml

add to MagicVilla_Web/Views/Shared/_Layout.cshtml

ERROR will be:
AspNetCore.Views_VillaNumber_IndexVillaNumber.ExecuteAsync() in IndexVillaNumber.cshtml
+
                    <td>@item.Villa.Name</td>

73. Include Villa when retireving Villa Number. Needs to be done in API project
https://github.com/bhrugen/MagicVilla_API/commit/ccf04fc6d91d352d2cbffa6908773e38d9f96134
we already added villadto to villanumberdto in web project

MagicVilla_VillaAPI/Models/Dto/VillaNumberDTO.cs
MagicVilla_VillaAPI/Repository/IRepostiory/IRepository.cs
MagicVilla_VillaAPI/Repository/Repository.cs
MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs

1. add villadto to MagicVilla_VillaAPI/Models/Dto/VillaNumberDTO.cs
***Dont need to add to VillaNumber.cs model becuase it was already added

        public VillaDTO Villa { get; set; }


2. need to tell Repository that we need this property loaded
MagicVilla_VillaAPI/Repository/IRepostiory/IRepository.cs

        Task<List<T>> GetAllAsync(Expression<Func<T, bool>>? filter = null, string? includeProperties = null); //expression is for linq, can be ?null 
        Task<T> GetAsync(Expression<Func<T, bool>> filter = null, bool tracked = true, string? includeProperties = null);


3. Add this to repo methods GetAsync and GetAllAsync. FOR BOTH METHODS
MagicVilla_VillaAPI/Repository/Repository.cs

        public async Task<List<T>> GetAllAsync(Expression<Func<T, bool>>? filter = null, string? includeProperties = null)
        {...
                query = query.Where(filter);
            ...

            //73 include villa when igetting villa number. 
            //string? includeProperties = null accepts a string, such as "Villa,VillaSpecial", so that is the format we must use
            //
            if (includeProperties != null)
            {
                foreach (var includeProp in includeProperties.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProp);
                }
            }...

4. right now villanumbers API works and shows villa, but returns null. need to update the controller. 
MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs

        public async Task<ActionResult<APIResponse>> GetVillaNumbers()
        {
            try
            {...
                //get villa list. removed in 73.
                //IEnumerable<VillaNumber> villaNumberList = await _dbVillaNumber.GetAllAsync();
                //73 include villa in villanumbers
                IEnumerable<VillaNumber> villaNumberList = await _dbVillaNumber.GetAllAsync(includeProperties: "Villa");
                ...


74. Bootswatch Theme
https://github.com/bhrugen/MagicVilla_API/commit/9e70b63431f65f50dd1a73bc0c50277717131de4

we will use cyborg theme. dl bootstrap.css.
need to create that new style sheet file
Open file, copy, paste in MagicVilla_Web/wwwroot/css/bootstrap.css

Implement in universal _layout
MagicVilla_Web/Views/Shared/_Layout.cshtml


75. Villa Home Page
https://github.com/bhrugen/MagicVilla_API/commit/0bf121df2855c155cc8fac7d8543839dadcf3b55#diff-370cce6a3b8aded420660982e1b674fe4714231d43c6062891a58df22826cfc0
Display all Villas and images

add Index() to MagicVilla_Web/Controllers/HomeController.cs

In windows explorer:
Copy images folder from project resources
C:\DEV_Training\C#\Udemy\RESTful Web API - The Complete Guide (NET7 API) Part 1\Resources\Course Content\Resources
and paste to 
C:\DEV_Training\C#\Udemy\RESTful Web API - The Complete Guide (NET7 API) Part 1\MagicVilla\MagicVilla_Web\wwwroot

update MagicVilla_Web/Views/Home/Index.cshtml


76. Move Images to new url
https://github.com/bhrugen/MagicVilla_API/commit/81a68382d4c8c5f569b3df819b30f3be71a69a4e
MagicVilla_VillaAPI/Data/ApplicationDbContext.cs


77. Villa Number Assignment CRUD on villa number
create edit delete


78. Create Villa Number GET for CREATE. include a Dropdown
https://github.com/bhrugen/MagicVilla_API/commit/23e9997231ff1bcfe3274570fb8f2dd2fb7a71e9

create view model
MagicVilla_Web/Models/VM/VillaNumberCreateVM.cs
        public async Task<IActionResult> CreateVillaNumber()

create all action methods inside
MagicVilla_Web/Controllers/VillaNumberController.cs


79. Create Villa POST for Create
https://github.com/bhrugen/MagicVilla_API/commit/0975cfa755d9805a402449d9661ab84f2da5193f

create post method for create
MagicVilla_Web/Controllers/VillaNumberController.cs
        public async Task<IActionResult> CreateVillaNumber(VillaNumberCreateDTO model)

add view
MagicVilla_Web/Views/VillaNumber/CreateVillaNumber.cshtml



80. catch all ERROR messages and load to APIResponse Special Validation and Base Service Update. 
https://github.com/bhrugen/MagicVilla_API/commit/9b8046f21466780a69b317f0395eab913a3975db#diff-5a4a8658a29df1529951d57ee4113cd94b62b89c58fcba598d1804a2ec4b9927
when we try to create a villa number with an existing id, nothing happens
debug by looking at MagicVilla_Web/Services/BaseService.cs, apiResponse variable
and MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs
in BaseService, isSuccess is set to true, but error messages field is null

In API, replace all "CustomError" with the "ErrorMessages" - this is from APIResponse.
This will populate the list:
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs
MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs


In Web:
MagicVilla_Web/Controllers/VillaNumberController.cs
MagicVilla_Web/Services/BaseService.cs

update MagicVilla_Web/Services/BaseService.cs to catch error message

update MagicVilla_Web/Controllers/VillaNumberController.cs to populatel dropdown once error is caught

                    return RedirectToAction(nameof(IndexVillaNumber));
                }...

            //if not successful, if we return to the view, we need to populate the dropdown again (model.VillaList). right now it will have no values is there is an error
            var resp = await _villaService.GetAllAsync<APIResponse>();
            if (resp != null && resp.IsSuccess)
            {
                model.VillaList = JsonConvert.DeserializeObject<List<VillaDTO>>
                    (Convert.ToString(resp.Result)).Select(i => new SelectListItem
                    {
                        Text = i.Name,
                        Value = i.Id.ToString()
                    }); ;
            }

            return View(model);
            ...


81. Display API ERROR Messages when creating
https://github.com/bhrugen/MagicVilla_API/commit/7a96cecd579c2b90d8ec6afedc8ec44f2ec4d648

add to controller MagicVilla_Web/Controllers/VillaNumberController.cs

        public async Task<IActionResult> CreateVillaNumber(VillaNumberCreateVM model)
                  ...  return RedirectToAction(nameof(IndexVillaNumber));
                }
                //81 display api error message
                else
                {
                    if (response.ErrorMessages.Count > 0)
                    {
                        ModelState.AddModelError("ErrorMessages", response.ErrorMessages.FirstOrDefault());
                    }
                }...

add to MagicVilla_Web/Views/VillaNumber/CreateVillaNumber.cshtml

        <div class="row">
            @* <div asp-validation-summary="ModelOnly" class="text-danger"></div> *@
            <div asp-validation-summary="All" class="text-danger"></div>


82. Update and Delete Action Method for Villa Number VM and controller
https://github.com/bhrugen/MagicVilla_API/commit/825e350ee14a2c6654f6c884eaa5663497d2f903
MagicVilla_Web/Models/VM/VillaNumberDeleteVM.cs
MagicVilla_Web/Models/VM/VillaNumberUpdateVM.cs
MagicVilla_Web/Controllers/VillaNumberController.cs

create
MagicVilla_Web/Models/VM/VillaNumberDeleteVM.cs
MagicVilla_Web/Models/VM/VillaNumberUpdateVM.cs

add to controller, more changes here too from lesson 83:
https://github.com/bhrugen/MagicVilla_API/commit/b3eeb01883dd5c95be6ec715bccc1ffbde52948d
MagicVilla_Web/Controllers/VillaNumberController.cs


83. Update and Delete Villa Number, cshtml view pages
https://github.com/bhrugen/MagicVilla_API/commit/b3eeb01883dd5c95be6ec715bccc1ffbde52948d#diff-c12fee5170a289f7e106b320b994386a287862a9af9d9507c96844141bba4077


84. Sweet Alert
https://github.com/bhrugen/MagicVilla_API/commit/073737eb4afc42f1bf9541b19d59dd4eaed64f92#diff-968d9422cee819115287dec3c2866b8a3814a75d88ba3d12d3f8919a1b1598ff

https://sweetalert2.github.io/
https://sweetalert2.github.io/#download

Add to MagicVilla_Web/Views/Shared/_Layout.cshtml:
<body>
    <partial name="_Notification" />
    <header>
    ...
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    ...

create new partial view MagicVilla_Web/Views/Shared/_Notification.cshtml


To invoke:
https://sweetalert2.github.io/#examples
Look for example with confirm button

Usage example in MagicVilla_Web/Controllers/VillaController.cs:
TempData["success"] = "Villa created successfully";




*****this is from bulky project****
C:\DEV_Training\C#\Udemy\ASP.NET Core MVC - The Complete Guide 2023 [NET8]\Bulky\BulkyWeb\wwwroot\js\product.js
Add to product.js file

top of file:
var dataTable;

bottom of file:

function Delete(url) {
    Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this change",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it"
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: url, //url in Delete(url)
                type: 'DELETE', //[HttpDelete]
                success: function (data) {
                    data.ajax.reload();
                    toastr.success(data.message);
                }
            })
            //Swal.fire({
            //    title: "Deleted!",
            //    text: "Your file has been deleted.",
            //    icon: "success"
            });
        }
    });
}

then change href  in middle of file to:

                "render": function (data) {
                    return `<div class="w-75 btn-group" role="group">
                     <a href="/admin/product/upsert?id=${data}" class="btn btn-primary mx-2"> <i class="bi bi-pencil-square"></i> Edit</a>               
                     <a onClick= Delete('/admin/product/delete/${data}') class="btn btn-danger mx-2"> <i class="bi bi-trash-fill"></i> Delete</a>
                    </div>`
                },




