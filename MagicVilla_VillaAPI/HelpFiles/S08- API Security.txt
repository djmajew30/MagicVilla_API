https://github.com/bhrugen/MagicVilla_API/commits/master/?after=ded7b5475d6514cb2865de5293a001ebb3aeda45+34

85. API SECURITY- Add Models for Login and Registration
https://github.com/bhrugen/MagicVilla_API/commit/ab317f4674a55b0ff95cb5f4ea2ecd0bc13f222d

MagicVilla_VillaAPI/Models/LocalUser.cs
MagicVilla_VillaAPI/Models/Dto/RegisterationRequestDTO.cs
MagicVilla_VillaAPI/Models/Dto/LoginResponseDTO.cs
MagicVilla_VillaAPI/Models/Dto/LoginRequestDTO.cs
MagicVilla_VillaAPI/Data/ApplicationDbContext.cs

Create model
MagicVilla_VillaAPI/Models/LocalUser.cs

create DTOs
MagicVilla_VillaAPI/Models/Dto/LoginRequestDTO.cs

if request is successful, we send a response with user details and valid token in:
MagicVilla_VillaAPI/Models/Dto/LoginResponseDTO.cs

MagicVilla_VillaAPI/Models/Dto/RegistrationRequestDTO.cs
No response needed, just 200 ok returned

Add to ApplicationDbContext
MagicVilla_VillaAPI/Data/ApplicationDbContext.cs

push migration.
pm console api project
add-migration addUsersToDb
update-database


86. Add UserRepository and IUserRepository. has methods to be implemented
https://github.com/bhrugen/MagicVilla_API/commit/9d9882aecee860f5ae09befc5b240ea6d2ba33af

Add interface MagicVilla_VillaAPI/Repository/IRepostiory/IUserRepository.cs
MagicVilla_VillaAPI/Repository/UserRepository.cs


87. Implement User Repository - Register
https://github.com/bhrugen/MagicVilla_API/commit/19ef5c5ff749542bc986a3cee856b7fa08d7e6c8
MagicVilla_VillaAPI/Repository/UserRepository.cs
        public bool IsUniqueUser(string username)
        public async Task<LocalUser> Register(RegistrationRequestDTO registerationRequestDTO)


88. Implement User Repository - Login. validate username and password part 1
https://github.com/bhrugen/MagicVilla_API/commit/b054f24dbe3b1d1813b790796407e5cf15d0cfea

MagicVilla_VillaAPI/Repository/UserRepository.cs

       private readonly ApplicationDbContext _db;
        private string secretKey;

        public UserRepository(ApplicationDbContext db, IConfiguration configuration)
        {
            _db = db;
            secretKey = configuration.GetValue<string>("ApiSettings:Secret");
        }
        ...
        public async Task<LoginResponseDTO> Login(LoginRequestDTO loginRequestDTO)
        {
            var user = _db.LocalUsers.FirstOrDefault(
                u => u.UserName.ToLower() == loginRequestDTO.UserName.ToLower()
                && u.Password == loginRequestDTO.Password);

            if (user == null) //not a valid login, not found
            {
                return null;
            }

            //if user was found generate JWT Token. need secret key token will be encrypted

        }

MagicVilla_VillaAPI/appsettings.json

        "DefaultSQLConnection": "Server=P17-PF2PTX0W\\SQLEXPRESS;Database=Magic_VillaAPI;TrustServerCertificate=True;Trusted_Connection=True;MultipleActiveResultSets=true"
      },
      "ApiSettings": {
        "Secret": "THIS IS USED TO SIGN AND VERIFY JWT TOKENS, REPLACE IT WITH YOUR OWN SECRET"
      }
    }

89. Generate JWT Token on Successful Login, validate username and password part 2
MagicVilla_VillaAPI/Repository/UserRepository.cs

        public async Task<LoginResponseDTO> Login(LoginRequestDTO loginRequestDTO)
        {
            var user = _db.LocalUsers.FirstOrDefault(
                u => u.UserName.ToLower() == loginRequestDTO.UserName.ToLower()
                && u.Password == loginRequestDTO.Password);

            if (user == null) //not a valid login, not found
            {
                 return new LoginResponseDTO()
                {
                    Token = "",
                    User = null
                };
            }

           //if user was found generate JWT Token. need secret key token will be encrypted
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(secretKey); //converts key to bytes 

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, user.Id.ToString()),
                    new Claim(ClaimTypes.Role, user.Role)
                }),
                Expires = DateTime.UtcNow.AddDays(7),
                SigningCredentials = new(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            LoginResponseDTO loginResponseDTO = new LoginResponseDTO()
            {
                Token = tokenHandler.WriteToken(token), //WriteToken serializes
                User = user
            };
            return loginResponseDTO;
        }

90. UserController.cs create in API
https://github.com/bhrugen/MagicVilla_API/commit/42d69f70fa7ecbd27e5c4ed62712266fa47dadfa
MagicVilla_VillaAPI/Controllers/UsersController.cs

add to MagicVilla_VillaAPI/Program.cs
builder.Services.AddScoped<IVillaRepository, VillaRepository>();
builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<IVillaNumberRepository, VillaNumberRepository>();

91. Login and Register in Action, https://jwt.io/

{
  "userName": "testadmin@gmail.com",
  "name": "David",
  "password": "Admin123",
  "role": "admin"
}

SELECT * FROM [Magic_VillaAPI].dbo.LocalUsers

https://localhost:7001/api/UsersAuth/login:

{
  "statusCode": 200,
  "isSuccess": true,
  "errorMessages": [],
  "result": {
    "user": {
      "id": 1,
      "userName": "testadmin@gmail.com",
      "name": "David",
      "password": "Admin123",
      "role": "admin"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjEiLCJyb2xlIjoiYWRtaW4iLCJuYmYiOjE3MTI5NTI1NDIsImV4cCI6MTcxMzU1NzM0MiwiaWF0IjoxNzEyOTUyNTQyfQ.uvb_hb5IM2CO0xBAtI7kFBQmUtjmxPdFYeEIY-Clk2Y"
  }
}

put token into https://jwt.io/ to see

{
  "unique_name": "1",
  "role": "admin",
  "nbf": 1712952542,
  "exp": 1713557342,
  "iat": 1712952542
}


92. Secure API Endpoints, allow only authorized users to access certain controllers
https://github.com/bhrugen/MagicVilla_API/commit/65953b8e0796a7331a4f457f4b11d5c90c9dfd65#diff-05d3e6a00179038ec6b16b6a8bdb5f8e15775ceb288168625aead8b0348c39cb
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs


93. Authentication in Action. adding JWT token for when we log in. configure in program.cs, install nuget package. with POSTMAN
https://github.com/bhrugen/MagicVilla_API/commit/246f8153ba98ef45b79c4dae7833f8eb74cf85d2

use postman to test
api swagger login:
{
  "userName": "testadmin@gmail.com",
  "password": "Admin123"
}
token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjEiLCJyb2xlIjoiYWRtaW4iLCJuYmYiOjE3MTMxMDAzNTIsImV4cCI6MTcxMzcwNTE1MiwiaWF0IjoxNzEzMTAwMzUyfQ.IY8rJMEkyEJXidtJlA0wT7iRubCaL_mPbT560t3en6o

postman, new request headers
click authorization tab, chose bearer
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjEiLCJyb2xlIjoiYWRtaW4iLCJuYmYiOjE3MTMxMDAzNTIsImV4cCI6MTcxMzcwNTE1MiwiaWF0IjoxNzEzMTAwMzUyfQ.IY8rJMEkyEJXidtJlA0wT7iRubCaL_mPbT560t3en6o

ERROR:
System.InvalidOperationException: No authenticationScheme was specified, and there was no DefaultChallengeScheme found. 
The default schemes can be set using either AddAuthentication(string defaultScheme) or AddAuthentication(Action<AuthenticationOptions> configureOptions).

so we need to add nuget package to VillaAPI project:
Microsoft.AspNetCore.Authentication.JwtBearer

MagicVilla_VillaAPI/Program.cs

    //46 automapper
    builder.Services.AddAutoMapper(typeof(MappingConfig));

    //93 jwt authentication
    var key = builder.Configuration.GetValue<string>("ApiSettings:Secret");

    builder.Services.AddAuthentication(x =>
    {
        x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    })
        .AddJwtBearer(x => {
            x.RequireHttpsMetadata = false;
            x.SaveToken = true;
            x.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(key)),
                ValidateIssuer = false,
                ValidateAudience = false
            };
        }); ;
...
app.UseHttpsRedirection();
//93 jwt authentication
app.UseAuthentication();
app.UseAuthorization();
...

94. Swagger and Bearer in Action. It already works in POSTMAN
https://github.com/bhrugen/MagicVilla_API/commit/8f065464f774d8fb8801b0867504cbb1006c7fa6#diff-7f2db5ccf43e9f0825f9f25cf7bb653905d8f576d42d850b3f8f4d4a88e77e1c
happends in program.cs builder.Services.AddSwaggerGen();

Add proper product response types to MagicVilla_VillaAPI/Controllers/VillaAPIController.cs
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
to
GetVillas()
GetVilla(int id)
DeleteVilla(int id)

MagicVilla_VillaAPI/Program.cs
builder.Services.AddEndpointsApiExplorer();

    builder.Services.AddControllers();
    //94. Bearer token in swagger
    //builder.Services.AddSwaggerGen(); //replaced
    builder.Services.AddSwaggerGen(options => {
        options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
        {
            Description =
                "JWT Authorization header using the Bearer scheme. \r\n\r\n " +
                "Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\n" +
                "Example: \"Bearer 12345abcdef\"",
            Name = "Authorization",
            In = ParameterLocation.Header,
            Scheme = "Bearer"
        });
        options.AddSecurityRequirement(new OpenApiSecurityRequirement()
        {
            {
                new OpenApiSecurityScheme
                {
                    Reference = new OpenApiReference
                                {
                                    Type = ReferenceType.SecurityScheme,
                                    Id = "Bearer"
                                },
                    Scheme = "oauth2",
                    Name = "Bearer",
                    In = ParameterLocation.Header
                },
                new List<string>()
            }
        });
    });
    ...
    var app = builder.Build();

to test:
api swagger login:
{
  "userName": "testadmin@gmail.com",
  "password": "Admin123"
}

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjEiLCJyb2xlIjoiYWRtaW4iLCJuYmYiOjE3MTMxMDE4MDIsImV4cCI6MTcxMzcwNjYwMiwiaWF0IjoxNzEzMTAxODAyfQ.FxBQ_w5fBWwyCbUCHmBrMCW4SE1gUg4kg734mLwIw9k

then click authorize in swagger, type ""Bearer (token)""
