44. Separate DTO for Create and Update
https://github.com/bhrugen/MagicVilla_API/commit/2c3ed1ebcb7f669185886b67a5209e20faa9fd23?diff=split&w=0#diff-7639ff51b336ce6a0f764af782bd6e5fd770cd1a636fea0a231b9794c90ec737
If validation or fields are different for each, such as not needing an id for create or image must be present in updating

Create new DTO's
MagicVilla_VillaAPI/Models/Dto/VillaCreateDTO.cs
MagicVilla_VillaAPI/Models/Dto/VillaUpdateDTO.cs

Update controller
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs


45. Async Methods when working with EF core
https://github.com/bhrugen/MagicVilla_API/commit/ccb9c106da7ff96c30d5261d05c89f5325c3733f
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs

anywhere we add Async method , add await to the beginning

change return Ok(_db.Villas.ToList()); to return Ok(await _db.Villas.ToListAsync());
add task to methods:
change ActionResult<VillaDTO> to async Task<ActionResult<VillaDTO>>
change IActionResult to async Task<IActionResult>
change SaveChanges() to SaveChangesAsync()
change
_db.Villas.FirstOrDefault(u => u.Name.ToLower() == villaDTO.Name.ToLower()) != null)
to
await _db.Villas.FirstOrDefaultAsync(u => u.Name.ToLower() == villaDTO.Name.ToLower()) != null)
change _db.Villas.Add(model); to await _db.Villas.AddAsync(model);
change _db.SaveChanges(); to await _db.SaveChangesAsync();


46. Setup AutoMapper NuGet package and Mapping Config
right now, in MagicVilla_VillaAPI/Controllers/VillaAPIController.cs
we are converting an object using somethign like this:

            //convert villa to villadto
            VillaUpdateDTO villaDTO = new()
            {
                Amenity = villa.Amenity,
                Details = villa.Details,
                Id = villa.Id,
                ImageUrl = villa.ImageUrl,
                Name = villa.Name,
                Occupancy = villa.Occupancy,
                Rate = villa.Rate,
                Sqft = villa.Sqft
            };

What if we have much more? for that we have automapper.

1. install these packages (using 12.0 for this installation):
AutoMapper.Extensions.Microsoft.DependencyInjection
AutoMapper

2. Create MagicVilla_VillaAPI/MappingConfig.cs file

    public class MappingConfig : Profile
    {
        public MappingConfig()
        {
            CreateMap<Villa, VillaDTO>();
            CreateMap<VillaDTO, Villa>();

            CreateMap<Villa, VillaCreateDTO>().ReverseMap();
            CreateMap<Villa, VillaUpdateDTO>().ReverseMap();
        }
    }

3. add to MagicVilla_VillaAPI/Program.cs
...
        option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultSQLConnection"));
    });

    //46 automapper
    builder.Services.AddAutoMapper(typeof(MappingConfig));

    builder.Services.AddControllers(option =>
    ...


47. AutoMapper in Action




