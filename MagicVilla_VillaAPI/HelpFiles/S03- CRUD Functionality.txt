RESPONSE OBJECT
Status Codes for Operation Result

- 100-199: Informational

- 200-299: Success
  - 200 – OK
  - 201 – Created
  - 204 – No Content

- 300-399: Redirection

- 400-499: Client Errors
  - 400 – Bad Request
  - 404 – Not Found
  - 409 – Conflict
  

19. Status Code in EndPoints, define return type
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs

use ActionResult<> to use any return type we want

        [HttpGet]
        public ActionResult<IEnumerable<VillaDTO>> GetVillas()
        {
            return Ok(VillaStore.villaList); //200 success
        }

        [HttpGet("{id:int}")]
        public ActionResult<VillaDTO>  GetVilla(int id)
        {
            //19. add validation for bad request 400
            if (id == 0)
            {
                return BadRequest(); //400
            }

            var villa = VillaStore.villaList.FirstOrDefault(u => u.Id == id);

            //19. add validation for notfound 404
            if (villa == null)
            {
                return NotFound(); //404
            }

            return Ok(villa);
        }


20. Response Types not documented in API
right now code is returned but its not documented in API
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs

        [HttpGet]
        //these are to document/remove undocumented
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<VillaDTO>> GetVillas()
        ...
        [HttpGet("{id:int}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        //[ProducesResponseType(200, Type =typeof(VillaDTO))]
        public ActionResult<VillaDTO>  GetVilla(int id)



21. HttpPOST in Action, Add a villa in VillaStore Data Source
https://github.com/bhrugen/MagicVilla_API/commit/08a4bee751626c04637118ecb4237d68cee2adac
MagicVilla_VillaAPI/Controllers/VillaAPIController.cs

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<VillaDTO> CreateVilla([FromBody]VillaDTO villaDTO)
        {
            //add validations
            //not the right information
            if (villaDTO == null)
            {
                return BadRequest(villaDTO);
            }

            //id should be 0
            if (villaDTO.Id > 0)
            {
                return StatusCode(StatusCodes.Status500InternalServerError); 
            }

            //Get/assign new id of the villa object, max id + 1 
            villaDTO.Id = VillaStore.villaList.OrderByDescending(u => u.Id).FirstOrDefault().Id + 1;
            VillaStore.villaList.Add(villaDTO);

            return Ok(villaDTO);
        }

Start project, post and change only name, test with get methods. will not save becuase we are not using a database right now


22. CreatedAtRoute, to give you link of new resource that was created instead of Ok 200

Give httpget GetVilla an explicit name to call on later:
        [HttpGet("{id:int}", Name ="GetVilla")]

Now we can use in CreateVilla to return created at route for 201

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]//want to give 201 created instead
        ...
        public ActionResult<VillaDTO> CreateVilla([FromBody]VillaDTO villaDTO)
        {...
            VillaStore.villaList.Add(villaDTO);

            return CreatedAtRoute("GetVilla",new { id = villaDTO.Id }, villaDTO); //returns location: https://localhost:7245/api/VillaAPI/3 in response headers
        }


23. ModelState Validations, ex. name field required, max length 30 chars

MagicVilla_VillaAPI/Models/Dto/VillaDTO.cs

        [Required]
        [MaxLength(30)]
        public string Name { get; set; }

Validation works becuase the villaapicontroller use annotation of 
    [ApiController]

If that annotation is not used, we need to check it like this in CreateVilla:
            //if (!ModelState.IsValid)
            //{
            //    return BadRequest(ModelState);
            //}

MagicVilla_VillaAPI/Controllers/VillaAPIController.cs



24. Custom ModelState Validation, unique/distinct villa name needed, villa already exists

        public ActionResult<VillaDTO> CreateVilla([FromBody]VillaDTO villaDTO)
        {...
            //24. Custom ModelState Validation, unique/distinct villa name
            if (VillaStore.villaList.FirstOrDefault(u => u.Name.ToLower() == villaDTO.Name.ToLower()) != null)
            {
                ModelState.AddModelError("CustomError", "Villa already Exists!"); //key:value. Key must be unique
                return BadRequest(ModelState);
            }...


25. Http Delete in Action





26. Http PUT in action





27. Http Patch Nuget Packages





28. Http Patch in Action





29. PostMan




30. Content Negotiations



