https://github.com/bhrugen/MagicVilla_API/commits/master/?before=ded7b5475d6514cb2865de5293a001ebb3aeda45+35

"userName": "testadmin@gmail.com",
"password": "Admin123"
  
103. Nuget Packages for API Versioning
nuget install insto VILLA API proj
Microsoft.AspNetCore.Mvc.Versioning
Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer

These are depreciated, please try
Asp.Versioning.Mvc
Asp.Versioning.Mvc.ApiExplorer


104. Add Versioning to API Services and default version
https://github.com/bhrugen/MagicVilla_API/commit/89a2bdccbf3d51ee0b488aaf5e5eec96abddb88b#diff-aadb17292038f3d69a234614bbb99e36edee9b967d77c074725bb64732539294
MagicVilla_VillaAPI/Program.cs

    //46 automapper
    builder.Services.AddAutoMapper(typeof(MappingConfig));

    //104. Add Versioning to API Services
    builder.Services.AddApiVersioning(options =>
    {
        //use and set default version
        options.AssumeDefaultVersionWhenUnspecified = true;
        options.DefaultApiVersion = new ApiVersion(1, 0);
    });

    //93 jwt authentication
    var key = builder.Configuration.GetValue<string>("ApiSettings:Secret");



105. API Version Attribute [ApiVersion("1.0")]
https://github.com/bhrugen/MagicVilla_API/commit/fa38f0a77d9f9ed07d60c73a62f396749c640ca7

MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs

    [Route("api/VillaNumberAPI")]
    [ApiController]
    [ApiVersion("2.0")]
    public class VillaNumberAPIController : ControllerBase


106. Multiple Version in same ControllerLets assume we are working on a new version of GetVillaNumber(int id) in MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs
https://github.com/bhrugen/MagicVilla_API/commit/6b1a5afdcf2a2f78e5c30cb19e0e4d4a7c06bd4d#diff-65f682a433fcc0cf21257269bf0e4fc17831340eeed8e2504533738235da3e36

Lets assume we are working on a new version of GetVillaNumber(int id)
in MagicVilla_VillaAPI/Controllers/VillaNumberAPIController.cs

    [Route("api/v{version:apiVersion}/VillaNumberAPI")]
    [ApiController]
    [ApiVersion("1.0")]
    [ApiVersion("2.0")]
    public class VillaNumberAPIController : ControllerBase
    {
        protected APIResponse _response;
        ...
        [HttpGet]
        [MapToApiVersion("1.0")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<ActionResult<APIResponse>> GetVillaNumbers()
        ...

        [MapToApiVersion("2.0")]
        [HttpGet]
        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

add to MagicVilla_VillaAPI/Program.cs

        options.DefaultApiVersion = new ApiVersion(1, 0);
    });
    //new
    builder.Services.AddVersionedApiExplorer(options =>
    {
        options.GroupNameFormat = "'v'VVV";
    });
    var key = builder.Configuration.GetValue<string>("ApiSettings:Secret");



107. API Version Configuration
https://github.com/bhrugen/MagicVilla_API/commit/d57915995092695fc85390e17f053d635438bd31

Add version routes to 
MagicVilla_VillaAPI/Controllers/UsersController.cs

    [Route("api/v{version:apiVersion}/UsersAuth")]
    [ApiController]
    [ApiVersion("1.0")]

MagicVilla_VillaAPI/Controllers/VillaAPIController.cs

    [Route("api/v{version:apiVersion}/VillaAPI")]
    [ApiController]
    [ApiVersion("1.0")]

MagicVilla_VillaAPI/Program.cs

    //104. Add Versioning to API Services
    builder.Services.AddApiVersioning(options =>
    {
        //use and set default version
        options.AssumeDefaultVersionWhenUnspecified = true;
        //options.DefaultApiVersion = new ApiVersion(1, 0);
        //107 version config. in response header, we want to show which api versions are available
        options.DefaultApiVersion = new ApiVersion(2, 0);
        options.ReportApiVersions = true;
    });

    //106 multiple versions
    builder.Services.AddVersionedApiExplorer(options =>
    {
        options.GroupNameFormat = "'v'VVV";
        //107 version config. invokes v1 in url automatically
        options.SubstituteApiVersionInUrl = true;
    });

108. Swagger Document for v1. clean up
https://github.com/bhrugen/MagicVilla_API/commit/69325f88c299c010c2715701d4284cb6f8c4c162
MagicVilla_VillaAPI/Program.cs

                    new List<string>()
                }
            });
            options.SwaggerDoc("v1", new OpenApiInfo
            {
                Version = "v1.0",
                Title = "Magic Villa",
                Description = "API to manage Villa",
                TermsOfService = new Uri("https://example.com/terms"),
                Contact = new OpenApiContact
                {
                    Name = "Dotnetmastery",
                    Url = new Uri("https://dotnetmastery.com")
                },
                License = new OpenApiLicense
                {
                    Name = "Example License",
                    Url = new Uri("https://example.com/license")
                }
            });
        });
        var app = builder.Build();

        // Configure the HTTP request pipeline.
        if (app.Environment.IsDevelopment())
        {
            app.UseSwagger();
            app.UseSwaggerUI(options => {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "Magic_VillaV1");
            });



109. Multiple Version Swagger Doc. want to invoke v2
https://github.com/bhrugen/MagicVilla_API/commit/9b9ac7e06e333ac05470a3229779e34f60d4235e

program.cs

        options.SwaggerDoc("v1", new OpenApiInfo
            {
                Version = "v1.0",
                Title = "Magic Villa V1",
                Description = "API to manage Villa",
                TermsOfService = new Uri("https://example.com/terms"),
                Contact = new OpenApiContact
                {
                    Name = "Dotnetmastery",
                    Url = new Uri("https://dotnetmastery.com")
                },
                License = new OpenApiLicense
                {
                    Name = "Example License",
                    Url = new Uri("https://example.com/license")
                }
            });
            options.SwaggerDoc("v2", new OpenApiInfo
            {
                Version = "v2.0",
                Title = "Magic Villa V2",
                Description = "API to manage Villa",
                TermsOfService = new Uri("https://example.com/terms"),
                Contact = new OpenApiContact
                {
                    Name = "Dotnetmastery",
                    Url = new Uri("https://dotnetmastery.com")
                },
                License = new OpenApiLicense
                {
                    Name = "Example License",
                    Url = new Uri("https://example.com/license")
                }
            });
            ...
                //108 swagger documentation
            app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "Magic_VillaV1");
                options.SwaggerEndpoint("/swagger/v2/swagger.json", "Magic_VillaV2");
            });




110. Managing Multiple Versions - Cleaner Approach






111. API Neutral and Depreciating API






112. Consume Versioned API





